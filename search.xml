<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>服务器软件介绍(1)</title>
      <link href="/2023/05/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0(1)/"/>
      <url>/2023/05/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0(1)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a name="R7BPo"></a></p><h2 id="为什么做生物信息要学习Linux"><a href="#为什么做生物信息要学习Linux" class="headerlink" title="为什么做生物信息要学习Linux"></a>为什么做生物信息要学习Linux</h2><p>主要是因为大部分生物信息软件是Linux版本，用命令行操作更加高效，因为命令行操作适合批量化。<br />1.1 SSH 登录 <br />SSH（Secure Shell）是一种能够以安全的方式提供远程登录的协议，也是目前远程管理 Linux 系统的首选方式。在此之前，一般使用 FTP 或 Telnet 来进行远程登录。但是因为它们以明 文的形式在网络中传输账户密码和数据信息，因此很不安全，很容易受到黑客发起的中间人 攻击，这轻则篡改传输的数据信息，重则直接抓取服务器的账户密码。  <br /><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1678798744831-1778ce61-2461-46d5-ac3c-d33ed01c78d6.png#averageHue=%23e1dbd1&clientId=udb25edc1-3d4e-4&from=paste&height=794&id=ub607625a&originHeight=794&originWidth=1254&originalType=binary&ratio=1&rotation=0&showTitle=false&size=431005&status=done&style=none&taskId=ub37a31ea-770d-4980-a3b2-ffc862f65c1&title=&width=1254" alt="image.png"><br /><strong>登录服务器需要IP地址，端口号，服务器用户名以及服务器密码</strong><br><a name="wcdPv"></a></p><h2 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a><strong>Xshell</strong></h2><p><a href="https://www.xshell.com/zh/free-for-home-school/">免费版申请链接</a>：<a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a><br />下载链接：<br /><a href="https://www.xshell.com/zh/downloading/?token=ZWVOYzdQTTRzcVFNOFpnT21VM0tlUUBqWGFKNjM3eFpSeXJNb2RfMHdJSlB3">https://www.xshell.com/zh/downloading/?token=ZWVOYzdQTTRzcVFNOFpnT21VM0tlUUBqWGFKNjM3eFpSeXJNb2RfMHdJSlB3</a><br /> 图为<strong>xshell 设置登录 IP 地址  <strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1685178803343-486e322a-bddd-4069-9046-3cdc60317fe3.png#averageHue=%23f0efee&clientId=u6d7aa743-878f-4&from=paste&height=699&id=u363b156d&originHeight=699&originWidth=661&originalType=binary&ratio=1&rotation=0&showTitle=false&size=41449&status=done&style=none&taskId=ud6f7513f-28de-4106-a3e3-5bb6828e14e&title=&width=661" alt="image.png"><br /><strong>名称可随意选取，协议选择SSH协议，主机填入服务器的IP地址，端口号默认是22</strong><br /></strong> xshell 设置输入账户名和密码  ：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1685200268395-7ca2157f-f808-4f26-bec9-51b0e37c975a.png#averageHue=%23efeeed&clientId=u6d7aa743-878f-4&from=paste&height=704&id=u2b290ab3&originHeight=704&originWidth=664&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40299&status=done&style=none&taskId=udb1fac69-8a44-43a4-bc06-df7f56fda66&title=&width=664" alt="image.png"><br /><strong>连接成功示意图：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1685198599149-45820613-1eb5-465d-a95a-89d3a57dede8.png#averageHue=%23090605&clientId=u6d7aa743-878f-4&from=paste&height=398&id=ua430ee0c&originHeight=398&originWidth=697&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32764&status=done&style=none&taskId=u7f9a24f1-e979-4492-8e9c-30e433e24c1&title=&width=697" alt="image.png"><br><a name="LZWFQ"></a></p><h2 id="要使Xshell设置更加舒适和适合自己的需求，可以考虑以下几个方面进行设置："><a href="#要使Xshell设置更加舒适和适合自己的需求，可以考虑以下几个方面进行设置：" class="headerlink" title="要使Xshell设置更加舒适和适合自己的需求，可以考虑以下几个方面进行设置："></a>要使Xshell设置更加舒适和适合自己的需求，可以考虑以下几个方面进行设置：</h2><p><a name="bQl8i"></a></p><h3 id="1-字体大小和颜色"><a href="#1-字体大小和颜色" class="headerlink" title="1. 字体大小和颜色"></a>1. 字体大小和颜色</h3><p>在Xshell中，可以通过“视图”菜单中的“选项”改变字体、字号和文字颜色。根据自己的习惯和需求，可以调整字体大小和颜色，使终端窗口更加清晰易读。</p><p><a name="q84kU"></a></p><h3 id="2-快捷键和命令"><a href="#2-快捷键和命令" class="headerlink" title="2. 快捷键和命令"></a>2. 快捷键和命令</h3><p>在Xshell中，可以设置自定义快捷键和自定义命令来提高操作效率。例如，设置一些常用命令的快捷键，可以快速调用，提高工作效率。</p><p><a name="vCjKy"></a></p><h3 id="3-远程主机管理"><a href="#3-远程主机管理" class="headerlink" title="3. 远程主机管理"></a>3. 远程主机管理</h3><p>Xshell可以通过“新建会话”和“网络浏览器”等功能连接远程主机。可以将经常使用的远程主机保存为会话，方便快速连接。还可以使用网络浏览器浏览本地或远程主机，方便文件传输和管理。</p><p><a name="CUbJH"></a></p><h3 id="4-自动登录和自动发送命令"><a href="#4-自动登录和自动发送命令" class="headerlink" title="4. 自动登录和自动发送命令"></a>4. 自动登录和自动发送命令</h3><p>在Xshell中，可以设置自动登录和自动发送命令，可以减少重复的输入和操作。例如，在进行重复性的操作时，可以通过设置自动发送命令来一次性完成。</p><p>总的来说，要使Xshell设置更加优化和方便，可以考虑自动登录，左键选中，右键粘贴 、前景色背景色、字体大小、透明度、支持中文显示等、不自动掉线、显示图形化、禁用响铃等 ，可以根据自己的需求和习惯进行个性化设置。</p><p><a name="v3rEe"></a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS3 </tag>
            
            <tag> Games </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器软件介绍(2)</title>
      <link href="/2023/05/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0(2)/"/>
      <url>/2023/05/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0(2)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a name="Q6l8d"></a></p><h3 id="MobaXterm"><a href="#MobaXterm" class="headerlink" title="MobaXterm"></a><strong>MobaXterm</strong></h3><p><a href="https://mobaxterm.mobatek.net/"><strong>MobaXterm</strong></a><strong>：</strong><a href="https://mobaxterm.mobatek.net/">https://mobaxterm.mobatek.net/</a><br /><strong>MobaXterm</strong>是一款Windows平台下的全功能终端和远程计算机管理软件，可以在一款软件中实现终端、文件传输、X11服务器、VNC客户端、SSH、RDP等多种功能。与其他终端软件相比，MobaXterm的优点很明显，它的核心优势在于介绍以下几个方面：</p><ol><li>全功能终端<br />MobaXterm提供了完整的命令行终端和远程终端功能，允许用户在一个窗口中同时管理多个远程连接，支持SSH、Telnet、RDP、VNC和XDMCP等协议。 </li><li>安全稳定<br />MobaXterm使用了先进的SSH技术，保护远程连接的安全性，并且具有AES 256位加密协议和支持基于公钥的身份验证等特性，保障了用户的资料安全。 </li><li>强大的文件传输<br />MobaXterm拥有高效的文件传输功能，支持SCP、SFTP、FTP协议，并且支持打开本地文件和远程文件，支持将多个文件或目录一次性压缩或解压等功能。 </li><li>X11服务器<br />MobaXterm内置了X11服务器，可在Windows环境下使用图形界面Linux应用程序并支持一个秘钥安装。 </li><li>高度可定制化<br />MobaXterm支持多种自定义功能，可根据用户的喜好或工作需要进行个性化设置，例如调整颜色方案、字体、背景等。</li></ol><p>总的来说，MobaXterm是一款非常强大的全功能终端和远程计算机管理软件，可以在一个窗口管理多个远程连接，具有文件传输、X11服务器、SSH、RDP等多种功能和高度可定制化，对于需要管理多个远程计算机的用户来说，这是一款能够极大提高效率的工具。<br />下载安装好MobaXterm之后，点击<strong>Session</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1685201694984-96035288-b5a7-4cc1-a6dc-f24f68b76924.png#averageHue=%23fbfafa&clientId=u2c78c4bd-d0c0-4&from=paste&height=610&id=u40d6e7a7&originHeight=610&originWidth=894&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21533&status=done&style=none&taskId=u44a6013c-1817-4399-a900-c263df0b521&title=&width=894" alt="image.png"><br><a name="wbmry"></a></p><h3 id="使用SSH进行连接"><a href="#使用SSH进行连接" class="headerlink" title="使用SSH进行连接"></a>使用SSH进行连接</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1685202351319-5774b2f0-1e5c-45b4-ba36-ab04ee2578e2.png#averageHue=%23f9f6f4&clientId=u61348f58-cc0b-4&from=paste&height=603&id=u030372ed&originHeight=603&originWidth=902&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56883&status=done&style=none&taskId=u05e439d7-71be-473e-8cba-ff638f0b4d6&title=&width=902" alt="image.png"><br /><strong>登陆成功示意图：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1685202385227-94285041-cfda-437c-918d-24bf3bb1046e.png#averageHue=%237d7c7a&clientId=u61348f58-cc0b-4&from=paste&height=649&id=u7670d642&originHeight=649&originWidth=1017&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86200&status=done&style=none&taskId=ub69fa584-5284-4235-8a3a-ab07a25e7c3&title=&width=1017" alt="image.png"><br /><strong>使用MobaXterm进行主机与服务器文件互传：</strong><br><a name="ia8LI"></a></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1685202450353-4e87b2ec-7976-44c6-8b5a-b4d46a7265ee.png#averageHue=%23f8f6f3&clientId=u556c492f-5d9e-4&from=paste&height=611&id=u60efd9b9&originHeight=611&originWidth=379&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30920&status=done&style=none&taskId=u59e4c681-014f-470c-88d7-7ba0abbf469&title=&width=379" alt="image.png"></h3><p><a name="Z4awx"></a></p><h3 id="与Xshell相比"><a href="#与Xshell相比" class="headerlink" title="与Xshell相比"></a>与Xshell相比</h3><p>MobaXterm和Xshell都是颇受欢迎的终端软件，它们各自有一些优缺点，我简要列举如下：</p><p>MobaXterm的特点：</p><ul><li>MobaXterm提供了多种远程连接协议，支持SSH、Telnet、RDP、VNC和XDMCP等协议，并且内置了X11服务器，可以在Windows环境下使用图形界面的Linux应用程序。</li><li>MobaXterm提供了文件传输、文本编辑和终端模拟等一系列功能，其中的文件传输功能使用起来较为便捷，编辑器方便了文本编辑的工作。</li><li>MobaXterm提供了全屏或分屏显示终端、支持颜色、字体、窗口大小、界面等各个方面的定制，以及不同风格的主题配色方案。</li></ul><p>Xshell的特点：</p><ul><li>Xshell是一款专门面向SSH的终端软件，从而对SSH连接提供了更多的支持和更高的稳定性，保障了用户的安全需求。</li><li>Xshell在操作上更加简洁明了，需要使用的操作项更少，适合对于初学者或者致力于SSH连接操作的用户。</li><li>Xshell 提供了经济实惠的价格（低于MobaXterm），推广更加广泛。</li></ul><p>综上所述，MobaXterm和Xshell在不同方面各自有不同的优势，用户可以选择根据自己的需要和权衡，选择最适合自己的终端软件。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS3 </tag>
            
            <tag> Games </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器软件介绍(3)</title>
      <link href="/2023/05/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0(3)/"/>
      <url>/2023/05/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0(3)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a name="o0Pgr"></a></p><h3 id="为何连不上服务器"><a href="#为何连不上服务器" class="headerlink" title="为何连不上服务器"></a>为何连不上服务器</h3><p><a name="Ef5Tn"></a></p><h3 id="1、账户密码问题"><a href="#1、账户密码问题" class="headerlink" title="1、账户密码问题"></a>1、账户密码问题</h3><p>首先就是注意账户拼写，密码注意大小写，中英文字符。<br><a name="mcBiW"></a></p><h3 id="2、网路问题"><a href="#2、网路问题" class="headerlink" title="2、网路问题"></a>2、网路问题</h3><p>一些单位外网无法访问内网服务器，只能在单位内部访问，访问内网需要专门 VPN。<br><a name="KryXr"></a></p><h3 id="3、端口号"><a href="#3、端口号" class="headerlink" title="3、端口号"></a>3、端口号</h3><p>SSH 默认端口号为 22，一些单位将 22 端口号封锁，因此导致连接不上服务器。<br><a name="ONowo"></a></p><h3 id="4、计算资源紧张"><a href="#4、计算资源紧张" class="headerlink" title="4、计算资源紧张"></a>4、计算资源紧张</h3><p>openssh 也是一个网络应用，当客户端发起访问请求，需要服务器端进行处理。而当服务器<br />计算资源紧张，例如 CPU 被占满，那么服务器就不能立即处理 openssh 的任务，需要等待。<br><a name="I4Itr"></a></p><h3 id="5、网络拥堵"><a href="#5、网络拥堵" class="headerlink" title="5、网络拥堵"></a>5、网络拥堵</h3><p>访问服务器网络很重要，很多情况下都是因为网络问题造成无法访问。<br><a name="V1MJ9"></a></p><h2 id="通过-ping-命令测试网络"><a href="#通过-ping-命令测试网络" class="headerlink" title="通过 ping 命令测试网络"></a>通过 ping 命令测试网络</h2><p>** 如果想测试本地网络与服务器端是否连通，可以使用自带的 ping 命令进行测试。 **<br />**ping成功的示意图： **<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1685200954939-72bdffbd-f2be-47f6-a205-0e63a0b58cbb.png#averageHue=%23110d09&clientId=u19f0567f-0d26-4&from=paste&height=206&id=uc37a619e&originHeight=206&originWidth=476&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9721&status=done&style=none&taskId=uce9baf3a-d593-468a-b736-056d42d72c2&title=&width=476" alt="image.png"><br><a name="A4ZtJ"></a></p><h2 id="系统文件传输"><a href="#系统文件传输" class="headerlink" title="系统文件传输"></a>系统文件传输</h2><p> 通常的生物信息分析流程为将测序数据传输到服务器端进行分析，得到结果之后传输到本地客户端才可以进行下载，能够进行服务器与客户端进行文件传输的工具有很多，包括 xftp，Filezilla等。<br><a name="piTlG"></a></p><h3 id="xftp"><a href="#xftp" class="headerlink" title="xftp"></a>xftp</h3><p><a href="https://www.xshell.com/zh/downloading/?token=YVRPNVNwR0djQmF5cUIxMmxuMXdrUUBqWGFKNjM3eFpSeXJNb2RfMHdJSlB3">xftp下载链接</a><a href="https://www.xshell.com/zh/downloading/?token=YVRPNVNwR0djQmF5cUIxMmxuMXdrUUBqWGFKNjM3eFpSeXJNb2RfMHdJSlB3">https://www.xshell.com/zh/downloading/?token=YVRPNVNwR0djQmF5cUIxMmxuMXdrUUBqWGFKNjM3eFpSeXJNb2RfMHdJSlB3</a><br><a name="Jjf9f"></a></p><h2 id="FIleZila-文件传输软件"><a href="#FIleZila-文件传输软件" class="headerlink" title="FIleZila(文件传输软件)"></a>FIleZila(文件传输软件)</h2><p>官方地址：<a href="https://www.filezilla.cn/download">filezilla下载地址</a></p><p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/34819848/1685201346059-b80d7ed5-71b3-47df-982b-f13a78b31ae6.jpeg#averageHue=%23f8efee&clientId=ue48add43-a1a4-4&from=ui&id=u048f83af&originHeight=299&originWidth=468&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35997&status=done&style=none&taskId=u54957991-34d8-4261-93d9-b1423241ccb&title=" alt="filezilla.jpg"><br /><strong>FileZilla</strong>是一种快速、可信赖的FTP客户端以及服务器端开放源代码程式，具有多种特色、直觉的接口。FileZilla是一款自由开源的FTP客户端，支持FTP、SFTP和FTP over SSL&#x2F;TLS协议，具有简单易用、高效稳定等特点，是常用的文件传输工具之一。下面是一些FileZilla的特点：</p><ol><li>跨平台支持<br />FileZilla不仅支持Windows系统，还支持macOS和Linux等多个平台，用户可以在不同的操作系统上使用FileZilla进行文件传输。 </li><li>用户界面友好<br />FileZilla的用户界面简单、直观，一目了然，即使是对于新手用户来说，也可以很容易地操作、使用FileZilla客户端完成文件传输。 </li><li>文件传输功能强大<br />FileZilla支持FTP、SFTP和FTP over SSL&#x2F;TLS等多种协议，能够进行快速、稳定、安全的文件传输，通过图形化的窗口界面，可以更方便地进行本地和远程文件的上传、下载、删除、重命名、复制、粘贴操作，并且支持断点续传功能等。 </li><li>配置文件自动保存<br />FileZilla会自动保存用户配置，以便用户随时打开软件时，可以直接加载以前的设置，减少了用户重复设置的时间和工作量。 </li><li>快捷管理站点<br />FileZilla支持多站点管理，且可进行快捷的注册和管理，用户可以在程序内部创建&#x2F;修改各类站点信息，每次连接 FTP 服务时只需要选择对应站点即可。</li></ol><p><strong>下载安装好之后，使用的示意图：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1685202691652-481026d9-6feb-4a17-a888-f1db078e2b2a.png#averageHue=%23f4edeb&clientId=ufca7608b-2980-4&from=paste&height=211&id=ude1f61b4&originHeight=211&originWidth=959&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36592&status=done&style=none&taskId=u19e85ed3-1809-4bc4-9f58-c87e0434f22&title=&width=959" alt="image.png"><br /><strong>连接成功示意图，可进行文件传输：</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1685202541766-24da141d-286d-40e5-8189-0f91dd8fa1ba.png#averageHue=%23f9f9f8&clientId=ufca7608b-2980-4&from=paste&height=856&id=uef6083b4&originHeight=856&originWidth=1917&originalType=binary&ratio=1&rotation=0&showTitle=false&size=117036&status=done&style=none&taskId=u04e360cd-f2ec-4ea4-8ca4-0ca11c98d8c&title=&width=1917" alt="image.png"><br />总的来说，FileZilla是一款强大的FTP客户端，适用于多种不同的操作系统，具有友好的用户界面和强大的文件传输功能，是进行文件传输时的一个非常优秀的选择。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS3 </tag>
            
            <tag> Games </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-生物信息学初识</title>
      <link href="/2023/05/10/01-%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%88%9D%E8%AF%86/"/>
      <url>/2023/05/10/01-%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>做生物信息需要学习哪些东西？</p><p> 分子生物学  Linux 命令行操作 使用生物软件 计算机编程 生物统计学  </p><p>生物信息学的应用领域非常广泛。小到细胞，大到生命之树，只要是生命，就有核酸，只要有核酸，就有测定序列的需求。</p><blockquote><p>因为核酸是遗传信息的载体，遗传信息描绘了生命的蓝图。种瓜得瓜，是男是女，都由遗传信息决定。</p></blockquote><p>测定核酸序列，才能从源头上探索生命的奥秘。当然我们也要小心还原论，认为只要测定序列就可以知道生命的所有秘密。但是对一个生命的研究，没有其核酸序列显然是不完整的。</p><ul><li>遗传信息从DNA流向RNA，再流向蛋白质。DNA是遗传信息的载体，RNA充当遗传信息的中介，蛋白质是生命活动的具体承担者；</li><li>DNA和RNA都可以自我复制；</li><li>RNA可以通过反转录作用成为DNA；</li><li>细胞内DNA集合形成基因组，RNA集合形成转录组，蛋白质集合形成蛋白质组，因此中心法则可以分为两个层次：</li></ul><ol><li>分子生物学中心法则：DNA –&gt; RNA –&gt; 蛋白质 –&gt; 细胞表型</li><li>基因组中心法则：基因组 –&gt; 转录组 –&gt; 蛋白质组 –&gt; 细胞表型</li></ol><p>当分子序列数据出现并开始改变传统生物学之时，生物信息学应运而生，其主要任务是聚焦于海量分子序列的分析。而基因组学和功能基因组学为两个紧密关联的学科。基因组学的目标是研究一个生物体的全部DNA序列，即基因组。功能基因组学致力于使用全基因组实验方法来研究基因和蛋白质功能。这体现了生物信息学的本质：生物学问题可以从多个层面来进行研究；从小到单个基因和蛋白质，大到细胞内通路和网络，甚至全基因组应答。我们的目标是利用计算机算法和数据库来助力生命科学的研究。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RNA-seq</title>
      <link href="/2023/05/09/first/"/>
      <url>/2023/05/09/first/</url>
      
        <content type="html"><![CDATA[<h3 id="转录组测序分析"><a href="#转录组测序分析" class="headerlink" title="转录组测序分析"></a>转录组测序分析</h3><blockquote><p>Author：谢淳  Update：2023-03-13</p></blockquote><h4 id="1-工作目录管理"><a href="#1-工作目录管理" class="headerlink" title="1.工作目录管理"></a>1.工作目录管理</h4><p>这一部分非常非常非常重要，拥有一个优秀的工作习惯比什么都重要</p><h5 id="1-1-目录一览"><a href="#1-1-目录一览" class="headerlink" title="1.1 目录一览"></a>1.1 目录一览</h5><pre><code class="bash">## 示例如下：├── database # 数据库存放目录，包括参考基因组，注释文件，公共数据库等├── project  # 项目分析目录    └── Purple #具体项目        ├── data # 数据存放目录        │   ├── cleandata # 过滤后的数据           │├── trim_galore # trim_galore过滤           │└── fastp    # fastp过滤        │   └── rawdata # 原始数据        ├──  Mapping # 比对目录        │   ├── Hisat2 # Hisat比对        └── Expression # 定量            ├── featureCounts # featureCounts</code></pre><h5 id="1-2-详细命令"><a href="#1-2-详细命令" class="headerlink" title="1.2 详细命令"></a>1.2 详细命令</h5><pre><code class="bash"># 进入到个人目录cd ~## 1.建立数据库目录：在数据库下建立参考基因组数据库，注意命名习惯：参考基因组版本信息mkdir -p database/genome/GRCh38_release104## 2.建立项目分析目录mkdir projectcd projectmkdir Human-16-Asthma-Trans # 注意项目命名习惯：物种-样本数-疾病-分析流程cd Human-16-Asthma-Trans# 建立数据存放目录mkdir -p data/rawdata  data/cleandata/trim_galore  data/cleandata/fastp# 建立比对目录mkdir -p Mapping/Hisat2 Mapping/Subjunc# 建立定量目录mkdir -p Expression/featureCounts  Expression/Salmon# 查看整个分析目录准备结构tree├── data│   ├── cleandata│   ├── trim_galore│   └── fastp│   └── rawdata├── Expression│   ├── featureCounts│   └── Salmon└── Mapping    ├── Hisat2    └── Subjunc</code></pre><h4 id="2-数据质控"><a href="#2-数据质控" class="headerlink" title="2.数据质控"></a>2.数据质控</h4><h5 id="2-1-fastqc"><a href="#2-1-fastqc" class="headerlink" title="2.1 fastqc"></a>2.1 fastqc</h5><p>目标：使用fastqc对原始数据进行质量评估</p><pre><code class="bash"># 激活conda环境conda activate rna# 连接数据到自己的文件夹cd $HOME/project/Human-16-Asthma-Trans/data/rawdataln -s /teach/t_rna/data/airway/fastq_raw25000/*gz ./# 使用FastQC软件对单个fastq文件进行质量评估，结果输出到qc/文件夹下fastqc  -t   6   -o  ./   SRR1039510_1.fastq.gz# 多个数据质控fastqc -t 6 -o ./  SRR*.fastq.gz# 使用MultiQc整合FastQC结果multiqc *.zip</code></pre><h5 id="2-2-课后习题答案"><a href="#2-2-课后习题答案" class="headerlink" title="2.2 课后习题答案"></a>2.2 课后习题答案</h5><p>1.统计reads_1.fq文件种共有多少条reads？</p><pre><code class="bash"># 答案不只一种，看看你能用集中方法算出来# NR表示行号# %表示除于取整zless -S SRR1039510_1.fastq.gz |awk &#39;&#123;if(NR%4==2)&#123;print&#125;&#125;&#39; |wc -l</code></pre><p>2.输出reads_1.fq文件中所有的序列ID（即第一行）</p><pre><code class="bash">zless -S SRR1039510_1.fastq.gz |awk &#39;&#123;if(NR%4==1)&#123;print&#125;&#125;&#39; |less -S</code></pre><p>3.输出SRR1039510_1.fastq.gz文件中所有的序列（即第二行）</p><pre><code class="bash">zless -S SRR1039510_1.fastq.gz |awk &#39;&#123;if(NR%4==2)&#123;print&#125;&#125;&#39; |less -S </code></pre><p>4.统计SRR1039510_1.fastq.gz碱基总数</p><pre><code class="bash"># awk的高阶用法：BEGIN END模块zless -S SRR1039510_1.fastq.gz |awk &#39;&#123; if(NR%4==2)&#123;print&#125; &#125;&#39; | awk &#39;BEGIN &#123;num=0&#125; &#123;num=num+length($0)&#125; END&#123; print &quot;num=&quot;num&#125;&#39;</code></pre><h4 id="3-数据过滤"><a href="#3-数据过滤" class="headerlink" title="3.数据过滤"></a>3.数据过滤</h4><p>目标：使用两款软件过滤fq文件，查看过滤前后的区别</p><h5 id="3-1-trim-galore过滤"><a href="#3-1-trim-galore过滤" class="headerlink" title="3.1 trim_galore过滤"></a>3.1 trim_galore过滤</h5><pre><code class="bash"># 激活小环境conda activate rna# 新建文件夹trim_galorecd $HOME/project/Human-16-Asthma-Trans/data/cleandatamkdir trim_galorecd trim_galore# 单个样本，使用tab键补全路径trim_galore --phred33 -q 20 --length 36 --max_n 3 --stringency 3 --fastqc -o ./ --paired ../../rawdata/SRR1039510_1.fastq.gz ../../rawdata/SRR1039510_2.fastq.gz# 先生成一个变量,为样本IDls $HOME/project/Human-16-Asthma-Trans/data/rawdata/*_1.fastq.gz | awk -F&#39;/&#39; &#39;&#123;print $NF&#125;&#39; | cut -d&#39;_&#39; -f1 &gt;ID# 多个样本 vim trim_galore.sh，以下为sh的内容rawdata=$HOME/project/Human-16-Asthma-Trans/data/rawdatacleandata=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galorecat ID | while read iddo  trim_galore --phred33 -q 20 --length 36 --max_n 3 --stringency 3 --fastqc --paired -o $&#123;cleandata&#125; $&#123;rawdata&#125;/$&#123;id&#125;_1.fastq.gz $&#123;rawdata&#125;/$&#123;id&#125;_2.fastq.gzdone# 提交任务到后台nohup sh trim_galore.sh &gt;trim_galore.log &amp;</code></pre><h5 id="3-2-fastp过滤"><a href="#3-2-fastp过滤" class="headerlink" title="3.2 fastp过滤"></a>3.2 fastp过滤</h5><pre><code class="bash">cd $HOME/project/Human-16-Asthma-Trans/data/cleandatamkdir fastpcd fastp# 定义文件夹cleandata=$HOME/project/Human-16-Asthma-Trans/data/cleandata/fastp/rawdata=$HOME/project/Human-16-Asthma-Trans/data/rawdata/# 单个样本fastp -i $rawdata/SRR1039510_1.fastq.gz \      -I $rawdata/SRR1039510_2.fastq.gz \      -o $cleandata/SRR1039510_1.fastp.fq.gz \      -O $cleandata/SRR1039510_2.fastp.fq.gz \      -h $cleandata/SRR1039510.html \      -j $cleandata/SRR1039510.json \      -l 36 -q 20 --compression=6 -R $cleandata/SRR1039510# 多个样本cat ../trim_galore/ID | while read iddofastp -l 36 -q 20 --compression=6 \  -i $&#123;rawdata&#125;/$&#123;id&#125;_1.fastq.gz \  -I $&#123;rawdata&#125;/$&#123;id&#125;_2.fastq.gz \  -o $&#123;cleandata&#125;/$&#123;id&#125;_1.fastp.fq.gz \  -O $&#123;cleandata&#125;/$&#123;id&#125;_2.fastp.fq.gz \  -R $&#123;cleandata&#125;/$&#123;id&#125; \  -h $&#123;cleandata&#125;/$&#123;id&#125;.fastp.html \  -j $&#123;cleandata&#125;/$&#123;id&#125;.fastp.json done# 运行fastp脚本nohup sh fastp.sh &gt;fastp.log &amp;</code></pre><h5 id="3-3-数据过滤前后比较"><a href="#3-3-数据过滤前后比较" class="headerlink" title="3.3 数据过滤前后比较"></a>3.3 数据过滤前后比较</h5><pre><code class="bash"># 进入过滤目录cd $HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galore# 原始数据zcat $rawdata/SRR1039510_1.fastq.gz | paste - - - - &gt; raw.txt#  过滤后的数据zcat SRR1039510_1_val_1.fq.gz |paste - - - - &gt; trim.txtawk &#39;(length($4)&lt;63)&#123;print$1&#125;&#39; trim.txt &gt; Seq.IDhead -n 100 Seq.ID &gt; ID100grep -w -f ID100 trim.txt | awk &#39;&#123;print$1,$4&#125;&#39; &gt; trim.smgrep -w -f ID100 raw.txt | awk &#39;&#123;print$1,$4&#125;&#39; &gt; raw.smpaste raw.sm trim.sm | awk &#39;&#123;print$2,$4&#125;&#39; | tr &#39; &#39; &#39;\n&#39; |less -S</code></pre><h4 id="4-数据比对"><a href="#4-数据比对" class="headerlink" title="4.数据比对"></a>4.数据比对</h4><p>目标：使用两个软件对fq数据进行比对，得到比对文件<strong>sam&#x2F;bam</strong>，并探索比对结果。</p><h5 id="4-1-参考基因组"><a href="#4-1-参考基因组" class="headerlink" title="4.1 参考基因组"></a>4.1 参考基因组</h5><pre><code class="bash">## 参考基因组准备:注意参考基因组版本信息# 下载，Ensembl：http://asia.ensembl.org/index.html# http://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/dna/# 进入到参考基因组目录cd $HOME/database/genome/GRCh38_release104# 下载基因组序列nohup wget -c http://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz &gt;dna.log &amp;# 下载转录组nohup wget -c http://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz &gt;rna.log &amp;# 下载基因组注释文件nohup wget -c http://ftp.ensembl.org/pub/release-104/gtf/homo_sapiens/Homo_sapiens.GRCh38.104.gtf.gz &gt;gtf.log &amp;# 解压nohup gunzip Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz Homo_sapiens.GRCh38.cdna.all.fa.gz &gt;unzip.log &amp;</code></pre><h5 id="4-2-课后作业"><a href="#4-2-课后作业" class="headerlink" title="4.2 课后作业"></a>4.2 课后作业</h5><p><strong>1.fastq与fasta文件转换</strong></p><pre><code class="sh">awk &#39;&#123; if(NR%4 == 1)&#123;print &quot;&gt;&quot; substr($0, 2)&#125; &#125; &#123;if(NR%4 == 2)&#123;print&#125; &#125;&#39; fastq &gt; fasta</code></pre><p><strong>2.从gff或者gft文件中获取基因的ID与symbol对应关系，以及biotype类型</strong></p><p>应用：ID与symbol转换本地化，不依赖于第三方工具和软件包，并可以根据biotype类型区分mRNA，lncRNA以及miRNA等信息。</p><pre><code class="bash"># 从gff或者gft文件中获取ID与symbol对应关系，以及biotype类型zless -S Homo_sapiens.GRCh38.95.gtf.gz  |awk -F&#39;\t&#39; &#39;&#123;if($3==&quot;gene&quot;)&#123;print$9&#125;&#125;&#39; |awk -F&#39;;&#39; &#39;&#123;print$1,$3,$5&#125;&#39; |awk &#39;&#123;print$2&quot;\t&quot;$4&quot;\t&quot;$6&#125;&#39; |sed &#39;s/&quot;//g&#39; |grep &#39;protein_coding&#39; &gt;protein_coding_id2name.xls</code></pre><h5 id="4-3-比对-hisat2"><a href="#4-3-比对-hisat2" class="headerlink" title="4.3 比对:hisat2"></a>4.3 比对:hisat2</h5><h6 id="构建索引"><a href="#构建索引" class="headerlink" title="构建索引"></a>构建索引</h6><pre><code class="bash"># 进入参考基因组目录cd $HOME/database/genome/GRCh38_release104# Hisat2构建索引，构建索引时间比较长，建议携程sh脚本提交后台运行hisat2-build Homo_sapiens.GRCh38.dna.primary_assembly.fa Homo_sapiens.GRCh38.dna.primary_assembly# 提交后台nohup sh index.sh &gt;index.sh.log &amp;</code></pre><h6 id="单样本"><a href="#单样本" class="headerlink" title="单样本"></a>单样本</h6><pre><code class="bash"># 进入比对文件夹cd $HOME/project/Human-16-Asthma-Trans/Mapping/Hisat2# 输入输出定义文件夹index=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.dna.primary_assemblyinputdir=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galore/outdir=$HOME/project/Human-16-Asthma-Trans/Mapping/Hisat2# 单个样本比对hisat2 -p 5 -x  $&#123;index&#125; \-1 $&#123;inputdir&#125;/SRR1039510_1_val_1.fq.gz \-2 $&#123;inputdir&#125;/SRR1039510_2_val_2.fq.gz \-S $&#123;outdir&#125;/SRR1039510.Hisat_aln.sam# sam转bamsamtools sort -@ 6 -o SRR1039510.Hisat_aln.sorted.bam SRR1039510.Hisat_aln.sam# 对bam建索引samtools index SRR1039510.Hisat_aln.sorted.bam SRR1039510.Hisat_aln.sorted.bam.bai</code></pre><h6 id="多样本"><a href="#多样本" class="headerlink" title="多样本"></a>多样本</h6><pre><code class="bash"># 多个样本批量进行比对，排序，建索引# Hisat.sh内容： 注意命令中的-，表示占位符，表示|管道符前面的输出。# vim Hisat.shindex=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.dna.primary_assemblyinputdir=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galore/outdir=$HOME/project/Human-16-Asthma-Trans/Mapping/Hisat2cat ../../data/cleandata/trim_galore/ID | while read iddo  hisat2 -p 5 -x $&#123;index&#125; -1 $&#123;inputdir&#125;/$&#123;id&#125;_1_val_1.fq.gz -2 $&#123;inputdir&#125;/$&#123;id&#125;_2_val_2.fq.gz 2&gt;$&#123;id&#125;.log  | samtools sort -@ 3 -o $&#123;outdir&#125;/$&#123;id&#125;.Hisat_aln.sorted.bam - &amp;&amp;  samtools index $&#123;outdir&#125;/$&#123;id&#125;.Hisat_aln.sorted.bam $&#123;outdir&#125;/$&#123;id&#125;.Hisat_aln.sorted.bam.baidone# 统计比对情况multiqc -o ./    SRR*log# 提交后台运行nohup sh Hisat.sh &gt;Hisat.log &amp;</code></pre><h5 id="4-4-比对-subjunc"><a href="#4-4-比对-subjunc" class="headerlink" title="4.4 比对:subjunc"></a>4.4 比对:subjunc</h5><h6 id="构建索引-1"><a href="#构建索引-1" class="headerlink" title="构建索引"></a>构建索引</h6><pre><code class="bash"># 进入参考基因组目录cd $HOME/database/genome/GRCh38_release104# subjunc构建索引，构建索引时间比较长，建议携程sh脚本提交后台运行subread-buildindex -o Homo_sapiens.GRCh38.dna.primary_assembly Homo_sapiens.GRCh38.dna.primary_assembly.fa</code></pre><h6 id="单样本-1"><a href="#单样本-1" class="headerlink" title="单样本"></a>单样本</h6><pre><code class="bash"># 进入文件夹cd $HOME/project/Human-16-Asthma-Trans/Mapping/Subjunc# 输入输出定义文件夹，上课使用的index为教师目录index=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.dna.primary_assemblyinputdir=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galoreoutdir=$HOME/project/Human-16-Asthma-Trans/Mapping/Subjunc # subjunc单样本比对subjunc -T 6 -i $&#123;index&#125; \        -r $&#123;inputdir&#125;/SRR1039510_1_val_1.fq.gz \        -R $&#123;inputdir&#125;/SRR1039510_2_val_2.fq.gz \        -o $&#123;outdir&#125;/SRR1039510.Subjunc.bam \        &gt;$&#123;outdir&#125;/SRR1039510.Subjunc.log# 排序以及构建bam索引 samtools sort -@ 6 -o SRR1039510.Subjunc.sorted.bam SRR1039510.Subjunc.bam# 建索引，.bai结尾的文件为索引samtools index SRR1039510.Subjunc.sorted.bam  SRR1039510.Subjunc.sorted.bam.bai</code></pre><h6 id="subjunc多样本比对"><a href="#subjunc多样本比对" class="headerlink" title="subjunc多样本比对"></a>subjunc多样本比对</h6><pre><code class="bash"># vim subjunc.shindex=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.dna.primary_assemblyinputdir=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galoreoutdir=$HOME/project/Human-16-Asthma-Trans/Mapping/Subjunccat ../../data/cleandata/trim_galore/ID | while read iddo  subjunc -T 10 -i $&#123;index&#125; -r $&#123;inputdir&#125;/$&#123;id&#125;_1_val_1.fq.gz -R $&#123;inputdir&#125;/$&#123;id&#125;_2_val_2.fq.gz -o $&#123;outdir&#125;/$&#123;id&#125;.Subjunc.bam 1&gt;$&#123;outdir&#125;/$&#123;id&#125;.Subjunc.log 2&gt;&amp;1 &amp;&amp; samtools sort -@ 6 -o $&#123;outdir&#125;/$&#123;id&#125;.Subjunc.sorted.bam  $&#123;outdir&#125;/$&#123;id&#125;.Subjunc.bam &amp;&amp; samtools index $&#123;outdir&#125;/$&#123;id&#125;.Subjunc.sorted.bam $&#123;outdir&#125;/$&#123;id&#125;.Subjunc.sorted.bam.baidone# 运行nohup sh subjunc.sh &gt;subjunc.log &amp;</code></pre><h4 id="5-sam-x2F-bam应用"><a href="#5-sam-x2F-bam应用" class="headerlink" title="5.sam&#x2F;bam应用"></a>5.sam&#x2F;bam应用</h4><h5 id="5-1-统计比对结果"><a href="#5-1-统计比对结果" class="headerlink" title="5.1 统计比对结果"></a>5.1 统计比对结果</h5><pre><code class="bash"># 单个样本samtools flagstat -@ 3 SRR1039510.Hisat_aln.sorted.bam# 多个样本，vim flagstat.shls *.sorted.bam | while read iddo  samtools flagstat -@ 10 $&#123;id&#125; &gt; $&#123;id/bam/flagstat&#125;done# 质控multiqc -o ./  *.flagstat# 运行nohup sh flagstat.sh &gt;flagstat.log &amp;</code></pre><h5 id="5-2-samtools工具使用"><a href="#5-2-samtools工具使用" class="headerlink" title="5.2 samtools工具使用"></a>5.2 samtools工具使用</h5><pre><code class="bash"># view查看bam文件samtools view SRR1039510.Hisat_aln.sorted.bamsamtools view -H SRR1039510.Hisat_aln.sorted.bamsamtools view -h SRR1039510.Hisat_aln.sorted.bam# index对bam文件建索引samtools index SRR1039510.Hisat_aln.sorted.bam SRR1039510.Hisat_aln.sorted.bam.bai# flagstat统计比对结果samtools flagstat -@ 3 SRR1039510.Hisat_aln.sorted.bam# sort排序 sam转bam并排序samtools sort -@ 3 -o SRR1039510.Hisat_aln.sorted.bam SRR1039510.Hisat_aln.sam# depth统计测序深度# 得到的结果中，一共有3列以指标分隔符分隔的数据，第一列为染色体名称，第二列为位点，第三列为覆盖深度samtools depth SRR1039510.Hisat_aln.sorted.bam &gt;SRR1039510.Hisat_aln.sorted.bam.depth.txt# 计算某一个基因的测序深度# 找到基因的坐标zless -S Homo_sapiens.GRCh38.95.gff3.gz |awk &#39;&#123;if($3==&quot;gene&quot;)print&#125;&#39; |grep &#39;ID=gene:ENSG00000186092&#39; |awk &#39;&#123;print $1&quot;\t&quot;$4&quot;\t&quot;$5&#125;&#39; &gt;ENSG00000186092.bedsamtools depth  -b  ENSG00000186092.bed SRR1039510.Hisat_aln.sorted.bam &gt;ENSG00000186092.bed.depth# 如何找到多比对的reads，flag值的理解# (0x100) 代表着多比对情况，所以直接用samtools view -f 0x100可以提取 multiple比对的 情况</code></pre><h4 id="6-表达定量"><a href="#6-表达定量" class="headerlink" title="6.表达定量"></a>6.表达定量</h4><h5 id="6-1-featureCounts"><a href="#6-1-featureCounts" class="headerlink" title="6.1 featureCounts"></a>6.1 featureCounts</h5><p>使用featureCounts对bam文件进行定量。</p><pre><code class="bash">cd $HOME/project/Human-16-Asthma-Trans/Expression/featureCounts## 定义输入输出文件夹gtf=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.95.gtf.gzinputdir=$HOME/project/Human-16-Asthma-Trans/Mapping/Hisat2/# featureCounts对bam文件进行计数featureCounts -T 6 -p -t exon -g gene_id -a $gtf -o all.id.txt $inputdir/*.sorted.bam# 对定量结果质控multiqc all.id.txt.summary# 得到表达矩阵cat all.id.txt | cut -f1,7- &gt; counts.txt# 处理表头，/teach/t_rna/要换成自己的路径less -S all.id.txt |grep -v &#39;#&#39; |cut -f 1,7- |sed &#39;s#/teach/t_rna/project/Human-16-Asthma-Trans/Mapping/Hisat2//##g&#39; |sed &#39;s#.Hisat_aln.sorted.bam##g&#39; &gt;raw_counts.txt# 列对齐显示head raw_counts.txt  |column -t</code></pre><h5 id="6-2-salmon定量"><a href="#6-2-salmon定量" class="headerlink" title="6.2 salmon定量"></a>6.2 salmon定量</h5><h6 id="构建索引-2"><a href="#构建索引-2" class="headerlink" title="构建索引"></a>构建索引</h6><pre><code class="bash">cd $HOME/database/genome/GRCh38_release104# 构建salmon索引salmon index -t Homo_sapiens.GRCh38.cdna.all.fa.gz -i Homo_sapiens.GRCh38.cdna.all.salmon</code></pre><h6 id="单个样本"><a href="#单个样本" class="headerlink" title="单个样本"></a>单个样本</h6><pre><code class="bash">cd $HOME/project/Human-16-Asthma-Trans/Expression/Salmon# 定义文件夹index=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.cdna.all.salmon/input=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galoreoutdir=$HOME/project/Human-16-Asthma-Trans/Expression/Salmon# 单样本测试：\后面不能有空格，否则会报错salmon quant -i $index -l A -p 5 \             -1 $input/SRR1039510_1_val_1.fq.gz \             -2 $input/SRR1039510_2_val_2.fq.gz \             -o $outdir/SRR1039510.quant</code></pre><h6 id="多个样本"><a href="#多个样本" class="headerlink" title="多个样本"></a>多个样本</h6><pre><code class="bash"># 编写脚本，使用salmon批量对目录下所有fastq文件进行定量# vim salmon.shindex=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.cdna.all.salmon/input=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galoreoutdir=$HOME/project/Human-16-Asthma-Trans/Expression/Salmoncat ../../data/cleandata/trim_galore/ID |while read id do  salmon quant -i $&#123;index&#125; -l A -1 $&#123;input&#125;/$&#123;id&#125;_1_val_1.fq.gz -2 $&#123;input&#125;/$&#123;id&#125;_2_val_2.fq.gz -p 5 -o $&#123;outdir&#125;/$&#123;id&#125;.quantdone# 后台运行脚本nohup bash salmon.sh 1&gt;salmon.log 2&gt;&amp;1 &amp;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/05/09/article-title/"/>
      <url>/2023/05/09/article-title/</url>
      
        <content type="html"><![CDATA[<h1 id="希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！"><a href="#希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！" class="headerlink" title="希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！"></a>希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！</h1><p><strong>我应该坚持学习的有：R Python Shell编程 NGS组学知识 RNA-seq为主 扩展到单细胞测序</strong></p><h3 id="关于生物学背景"><a href="#关于生物学背景" class="headerlink" title="关于生物学背景"></a>关于生物学背景</h3><p>作为计算机背景学生转过来，应当知道如何补充生物学背景，这里推荐慕课(<a href="https://www.icourse163.org/)%E7%9A%84%E4%B8%A4%E4%B8%AA%E8%AF%BE%E7%A8%8B">https://www.icourse163.org/)的两个课程</a></p><ul><li><p>复旦大学的基因组学：<a href="https://www.icourse163.org/course/FUDAN-1002839009#/info">https://www.icourse163.org/course/FUDAN-1002839009#/info</a></p></li><li><p>四川大学的细胞生物学：<a href="https://www.icourse163.org/course/SCU-46011">https://www.icourse163.org/course/SCU-46011</a></p></li><li><p>其它课程请自行搜索，按需学习，争取掌握生信技能树的生信基础100讲：<a href="https://mp.weixin.qq.com/s/Gr_0H4-GaTYkgUkbNHcMcg">https://mp.weixin.qq.com/s/Gr_0H4-GaTYkgUkbNHcMcg</a></p></li></ul><p>生信工程师的日常工作负责<strong>跑流程</strong>：从项目管理员获知要分析的样本数据，按固定操作投递分析任务。如若流程出了问题，第一时间求助公司流程研发人员。跑流程的生信工程师常面临着这样的职业发展问题：<strong>工作可替代性高</strong>，比较容易遇到职业的天花板。</p><p>生信工程师可以朝两个方向<strong>转型</strong>：一类是<strong>流程研发人员</strong>，对技术要求的能力高；另一类是<strong>分析结果的解读人员</strong>，对业务经验的要求高。</p><p><strong>01</strong> 知其然，知其所以然</p><p>想成为大牛，首先应该掌握你每天用的分析流程。在跑流程的过程中多问问自己：分析的是什么样的数据，跑的流程的步骤是怎样的？调用了哪些软件？</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1682242587438-aed49912-44d9-4b05-b50d-081133b649de.png" alt="img"></p><p><strong>02</strong> 善于总结问题</p><p>生信工程师应该善于总结日常工作中遇到的问题，让问题更多的在平时暴露。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1682242612200-87c59202-e6f3-45a6-a00e-11b3421bbf7c.png" alt="img"></p><p><strong>03</strong> 有效沟通，持续学习</p><p>生信工程师除了应该关注硬实力，平时还应该关注自身软实力的提升。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1682242634385-1943bafe-b1fd-4374-be6c-345eac38d482.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 希望自己在生物信息领域走的更远，有新的收获 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/05/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/05/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！"><a href="#希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！" class="headerlink" title="希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！"></a>希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！</h1><p><strong>我应该坚持学习的有：R Python Shell编程 NGS组学知识 RNA-seq为主 扩展到单细胞测序</strong></p><h3 id="关于生物学背景"><a href="#关于生物学背景" class="headerlink" title="关于生物学背景"></a>关于生物学背景</h3><p>作为计算机背景学生转过来，应当知道如何补充生物学背景，这里推荐慕课(<a href="https://www.icourse163.org/)%E7%9A%84%E4%B8%A4%E4%B8%AA%E8%AF%BE%E7%A8%8B">https://www.icourse163.org/)的两个课程</a></p><ul><li><p>复旦大学的基因组学：<a href="https://www.icourse163.org/course/FUDAN-1002839009#/info">https://www.icourse163.org/course/FUDAN-1002839009#/info</a></p></li><li><p>四川大学的细胞生物学：<a href="https://www.icourse163.org/course/SCU-46011">https://www.icourse163.org/course/SCU-46011</a></p></li><li><p>其它课程请自行搜索，按需学习，争取掌握生信技能树的生信基础100讲：<a href="https://mp.weixin.qq.com/s/Gr_0H4-GaTYkgUkbNHcMcg">https://mp.weixin.qq.com/s/Gr_0H4-GaTYkgUkbNHcMcg</a></p></li></ul><p>生信工程师的日常工作负责<strong>跑流程</strong>：从项目管理员获知要分析的样本数据，按固定操作投递分析任务。如若流程出了问题，第一时间求助公司流程研发人员。跑流程的生信工程师常面临着这样的职业发展问题：<strong>工作可替代性高</strong>，比较容易遇到职业的天花板。</p><p>生信工程师可以朝两个方向<strong>转型</strong>：一类是<strong>流程研发人员</strong>，对技术要求的能力高；另一类是<strong>分析结果的解读人员</strong>，对业务经验的要求高。</p><p><strong>01</strong> 知其然，知其所以然</p><p>想成为大牛，首先应该掌握你每天用的分析流程。在跑流程的过程中多问问自己：分析的是什么样的数据，跑的流程的步骤是怎样的？调用了哪些软件？</p><p><strong>02</strong> 善于总结问题</p><p>生信工程师应该善于总结日常工作中遇到的问题，让问题更多的在平时暴露。</p><p><strong>03</strong> 有效沟通，持续学习</p><p>生信工程师除了应该关注硬实力，平时还应该关注自身软实力的提升。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 希望自己在生物信息领域走的更远，有新的收获 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/09/hello-world/"/>
      <url>/2023/05/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
