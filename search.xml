<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>01-生物信息学初识</title>
      <link href="/2023/05/10/01-%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%88%9D%E8%AF%86/"/>
      <url>/2023/05/10/01-%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>做生物信息需要学习哪些东西？</p><p> 分子生物学  Linux 命令行操作 使用生物软件 计算机编程 生物统计学  </p><p>生物信息学的应用领域非常广泛。小到细胞，大到生命之树，只要是生命，就有核酸，只要有核酸，就有测定序列的需求。</p><blockquote><p>因为核酸是遗传信息的载体，遗传信息描绘了生命的蓝图。种瓜得瓜，是男是女，都由遗传信息决定。</p></blockquote><p>测定核酸序列，才能从源头上探索生命的奥秘。当然我们也要小心还原论，认为只要测定序列就可以知道生命的所有秘密。但是对一个生命的研究，没有其核酸序列显然是不完整的。</p><ul><li>遗传信息从DNA流向RNA，再流向蛋白质。DNA是遗传信息的载体，RNA充当遗传信息的中介，蛋白质是生命活动的具体承担者；</li><li>DNA和RNA都可以自我复制；</li><li>RNA可以通过反转录作用成为DNA；</li><li>细胞内DNA集合形成基因组，RNA集合形成转录组，蛋白质集合形成蛋白质组，因此中心法则可以分为两个层次：</li></ul><ol><li>分子生物学中心法则：DNA –&gt; RNA –&gt; 蛋白质 –&gt; 细胞表型</li><li>基因组中心法则：基因组 –&gt; 转录组 –&gt; 蛋白质组 –&gt; 细胞表型</li></ol><p>当分子序列数据出现并开始改变传统生物学之时，生物信息学应运而生，其主要任务是聚焦于海量分子序列的分析。而基因组学和功能基因组学为两个紧密关联的学科。基因组学的目标是研究一个生物体的全部DNA序列，即基因组。功能基因组学致力于使用全基因组实验方法来研究基因和蛋白质功能。这体现了生物信息学的本质：生物学问题可以从多个层面来进行研究；从小到单个基因和蛋白质，大到细胞内通路和网络，甚至全基因组应答。我们的目标是利用计算机算法和数据库来助力生命科学的研究。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RNA-seq</title>
      <link href="/2023/05/09/first/"/>
      <url>/2023/05/09/first/</url>
      
        <content type="html"><![CDATA[<h3 id="转录组测序分析"><a href="#转录组测序分析" class="headerlink" title="转录组测序分析"></a>转录组测序分析</h3><blockquote><p>Author：谢淳  Update：2023-03-13</p></blockquote><h4 id="1-工作目录管理"><a href="#1-工作目录管理" class="headerlink" title="1.工作目录管理"></a>1.工作目录管理</h4><p>这一部分非常非常非常重要，拥有一个优秀的工作习惯比什么都重要</p><h5 id="1-1-目录一览"><a href="#1-1-目录一览" class="headerlink" title="1.1 目录一览"></a>1.1 目录一览</h5><pre><code class="bash">## 示例如下：├── database # 数据库存放目录，包括参考基因组，注释文件，公共数据库等├── project  # 项目分析目录    └── Purple #具体项目        ├── data # 数据存放目录        │   ├── cleandata # 过滤后的数据           │├── trim_galore # trim_galore过滤           │└── fastp    # fastp过滤        │   └── rawdata # 原始数据        ├──  Mapping # 比对目录        │   ├── Hisat2 # Hisat比对        └── Expression # 定量            ├── featureCounts # featureCounts</code></pre><h5 id="1-2-详细命令"><a href="#1-2-详细命令" class="headerlink" title="1.2 详细命令"></a>1.2 详细命令</h5><pre><code class="bash"># 进入到个人目录cd ~## 1.建立数据库目录：在数据库下建立参考基因组数据库，注意命名习惯：参考基因组版本信息mkdir -p database/genome/GRCh38_release104## 2.建立项目分析目录mkdir projectcd projectmkdir Human-16-Asthma-Trans # 注意项目命名习惯：物种-样本数-疾病-分析流程cd Human-16-Asthma-Trans# 建立数据存放目录mkdir -p data/rawdata  data/cleandata/trim_galore  data/cleandata/fastp# 建立比对目录mkdir -p Mapping/Hisat2 Mapping/Subjunc# 建立定量目录mkdir -p Expression/featureCounts  Expression/Salmon# 查看整个分析目录准备结构tree├── data│   ├── cleandata│   ├── trim_galore│   └── fastp│   └── rawdata├── Expression│   ├── featureCounts│   └── Salmon└── Mapping    ├── Hisat2    └── Subjunc</code></pre><h4 id="2-数据质控"><a href="#2-数据质控" class="headerlink" title="2.数据质控"></a>2.数据质控</h4><h5 id="2-1-fastqc"><a href="#2-1-fastqc" class="headerlink" title="2.1 fastqc"></a>2.1 fastqc</h5><p>目标：使用fastqc对原始数据进行质量评估</p><pre><code class="bash"># 激活conda环境conda activate rna# 连接数据到自己的文件夹cd $HOME/project/Human-16-Asthma-Trans/data/rawdataln -s /teach/t_rna/data/airway/fastq_raw25000/*gz ./# 使用FastQC软件对单个fastq文件进行质量评估，结果输出到qc/文件夹下fastqc  -t   6   -o  ./   SRR1039510_1.fastq.gz# 多个数据质控fastqc -t 6 -o ./  SRR*.fastq.gz# 使用MultiQc整合FastQC结果multiqc *.zip</code></pre><h5 id="2-2-课后习题答案"><a href="#2-2-课后习题答案" class="headerlink" title="2.2 课后习题答案"></a>2.2 课后习题答案</h5><p>1.统计reads_1.fq文件种共有多少条reads？</p><pre><code class="bash"># 答案不只一种，看看你能用集中方法算出来# NR表示行号# %表示除于取整zless -S SRR1039510_1.fastq.gz |awk &#39;&#123;if(NR%4==2)&#123;print&#125;&#125;&#39; |wc -l</code></pre><p>2.输出reads_1.fq文件中所有的序列ID（即第一行）</p><pre><code class="bash">zless -S SRR1039510_1.fastq.gz |awk &#39;&#123;if(NR%4==1)&#123;print&#125;&#125;&#39; |less -S</code></pre><p>3.输出SRR1039510_1.fastq.gz文件中所有的序列（即第二行）</p><pre><code class="bash">zless -S SRR1039510_1.fastq.gz |awk &#39;&#123;if(NR%4==2)&#123;print&#125;&#125;&#39; |less -S </code></pre><p>4.统计SRR1039510_1.fastq.gz碱基总数</p><pre><code class="bash"># awk的高阶用法：BEGIN END模块zless -S SRR1039510_1.fastq.gz |awk &#39;&#123; if(NR%4==2)&#123;print&#125; &#125;&#39; | awk &#39;BEGIN &#123;num=0&#125; &#123;num=num+length($0)&#125; END&#123; print &quot;num=&quot;num&#125;&#39;</code></pre><h4 id="3-数据过滤"><a href="#3-数据过滤" class="headerlink" title="3.数据过滤"></a>3.数据过滤</h4><p>目标：使用两款软件过滤fq文件，查看过滤前后的区别</p><h5 id="3-1-trim-galore过滤"><a href="#3-1-trim-galore过滤" class="headerlink" title="3.1 trim_galore过滤"></a>3.1 trim_galore过滤</h5><pre><code class="bash"># 激活小环境conda activate rna# 新建文件夹trim_galorecd $HOME/project/Human-16-Asthma-Trans/data/cleandatamkdir trim_galorecd trim_galore# 单个样本，使用tab键补全路径trim_galore --phred33 -q 20 --length 36 --max_n 3 --stringency 3 --fastqc -o ./ --paired ../../rawdata/SRR1039510_1.fastq.gz ../../rawdata/SRR1039510_2.fastq.gz# 先生成一个变量,为样本IDls $HOME/project/Human-16-Asthma-Trans/data/rawdata/*_1.fastq.gz | awk -F&#39;/&#39; &#39;&#123;print $NF&#125;&#39; | cut -d&#39;_&#39; -f1 &gt;ID# 多个样本 vim trim_galore.sh，以下为sh的内容rawdata=$HOME/project/Human-16-Asthma-Trans/data/rawdatacleandata=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galorecat ID | while read iddo  trim_galore --phred33 -q 20 --length 36 --max_n 3 --stringency 3 --fastqc --paired -o $&#123;cleandata&#125; $&#123;rawdata&#125;/$&#123;id&#125;_1.fastq.gz $&#123;rawdata&#125;/$&#123;id&#125;_2.fastq.gzdone# 提交任务到后台nohup sh trim_galore.sh &gt;trim_galore.log &amp;</code></pre><h5 id="3-2-fastp过滤"><a href="#3-2-fastp过滤" class="headerlink" title="3.2 fastp过滤"></a>3.2 fastp过滤</h5><pre><code class="bash">cd $HOME/project/Human-16-Asthma-Trans/data/cleandatamkdir fastpcd fastp# 定义文件夹cleandata=$HOME/project/Human-16-Asthma-Trans/data/cleandata/fastp/rawdata=$HOME/project/Human-16-Asthma-Trans/data/rawdata/# 单个样本fastp -i $rawdata/SRR1039510_1.fastq.gz \      -I $rawdata/SRR1039510_2.fastq.gz \      -o $cleandata/SRR1039510_1.fastp.fq.gz \      -O $cleandata/SRR1039510_2.fastp.fq.gz \      -h $cleandata/SRR1039510.html \      -j $cleandata/SRR1039510.json \      -l 36 -q 20 --compression=6 -R $cleandata/SRR1039510# 多个样本cat ../trim_galore/ID | while read iddofastp -l 36 -q 20 --compression=6 \  -i $&#123;rawdata&#125;/$&#123;id&#125;_1.fastq.gz \  -I $&#123;rawdata&#125;/$&#123;id&#125;_2.fastq.gz \  -o $&#123;cleandata&#125;/$&#123;id&#125;_1.fastp.fq.gz \  -O $&#123;cleandata&#125;/$&#123;id&#125;_2.fastp.fq.gz \  -R $&#123;cleandata&#125;/$&#123;id&#125; \  -h $&#123;cleandata&#125;/$&#123;id&#125;.fastp.html \  -j $&#123;cleandata&#125;/$&#123;id&#125;.fastp.json done# 运行fastp脚本nohup sh fastp.sh &gt;fastp.log &amp;</code></pre><h5 id="3-3-数据过滤前后比较"><a href="#3-3-数据过滤前后比较" class="headerlink" title="3.3 数据过滤前后比较"></a>3.3 数据过滤前后比较</h5><pre><code class="bash"># 进入过滤目录cd $HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galore# 原始数据zcat $rawdata/SRR1039510_1.fastq.gz | paste - - - - &gt; raw.txt#  过滤后的数据zcat SRR1039510_1_val_1.fq.gz |paste - - - - &gt; trim.txtawk &#39;(length($4)&lt;63)&#123;print$1&#125;&#39; trim.txt &gt; Seq.IDhead -n 100 Seq.ID &gt; ID100grep -w -f ID100 trim.txt | awk &#39;&#123;print$1,$4&#125;&#39; &gt; trim.smgrep -w -f ID100 raw.txt | awk &#39;&#123;print$1,$4&#125;&#39; &gt; raw.smpaste raw.sm trim.sm | awk &#39;&#123;print$2,$4&#125;&#39; | tr &#39; &#39; &#39;\n&#39; |less -S</code></pre><h4 id="4-数据比对"><a href="#4-数据比对" class="headerlink" title="4.数据比对"></a>4.数据比对</h4><p>目标：使用两个软件对fq数据进行比对，得到比对文件<strong>sam&#x2F;bam</strong>，并探索比对结果。</p><h5 id="4-1-参考基因组"><a href="#4-1-参考基因组" class="headerlink" title="4.1 参考基因组"></a>4.1 参考基因组</h5><pre><code class="bash">## 参考基因组准备:注意参考基因组版本信息# 下载，Ensembl：http://asia.ensembl.org/index.html# http://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/dna/# 进入到参考基因组目录cd $HOME/database/genome/GRCh38_release104# 下载基因组序列nohup wget -c http://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz &gt;dna.log &amp;# 下载转录组nohup wget -c http://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz &gt;rna.log &amp;# 下载基因组注释文件nohup wget -c http://ftp.ensembl.org/pub/release-104/gtf/homo_sapiens/Homo_sapiens.GRCh38.104.gtf.gz &gt;gtf.log &amp;# 解压nohup gunzip Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz Homo_sapiens.GRCh38.cdna.all.fa.gz &gt;unzip.log &amp;</code></pre><h5 id="4-2-课后作业"><a href="#4-2-课后作业" class="headerlink" title="4.2 课后作业"></a>4.2 课后作业</h5><p><strong>1.fastq与fasta文件转换</strong></p><pre><code class="sh">awk &#39;&#123; if(NR%4 == 1)&#123;print &quot;&gt;&quot; substr($0, 2)&#125; &#125; &#123;if(NR%4 == 2)&#123;print&#125; &#125;&#39; fastq &gt; fasta</code></pre><p><strong>2.从gff或者gft文件中获取基因的ID与symbol对应关系，以及biotype类型</strong></p><p>应用：ID与symbol转换本地化，不依赖于第三方工具和软件包，并可以根据biotype类型区分mRNA，lncRNA以及miRNA等信息。</p><pre><code class="bash"># 从gff或者gft文件中获取ID与symbol对应关系，以及biotype类型zless -S Homo_sapiens.GRCh38.95.gtf.gz  |awk -F&#39;\t&#39; &#39;&#123;if($3==&quot;gene&quot;)&#123;print$9&#125;&#125;&#39; |awk -F&#39;;&#39; &#39;&#123;print$1,$3,$5&#125;&#39; |awk &#39;&#123;print$2&quot;\t&quot;$4&quot;\t&quot;$6&#125;&#39; |sed &#39;s/&quot;//g&#39; |grep &#39;protein_coding&#39; &gt;protein_coding_id2name.xls</code></pre><h5 id="4-3-比对-hisat2"><a href="#4-3-比对-hisat2" class="headerlink" title="4.3 比对:hisat2"></a>4.3 比对:hisat2</h5><h6 id="构建索引"><a href="#构建索引" class="headerlink" title="构建索引"></a>构建索引</h6><pre><code class="bash"># 进入参考基因组目录cd $HOME/database/genome/GRCh38_release104# Hisat2构建索引，构建索引时间比较长，建议携程sh脚本提交后台运行hisat2-build Homo_sapiens.GRCh38.dna.primary_assembly.fa Homo_sapiens.GRCh38.dna.primary_assembly# 提交后台nohup sh index.sh &gt;index.sh.log &amp;</code></pre><h6 id="单样本"><a href="#单样本" class="headerlink" title="单样本"></a>单样本</h6><pre><code class="bash"># 进入比对文件夹cd $HOME/project/Human-16-Asthma-Trans/Mapping/Hisat2# 输入输出定义文件夹index=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.dna.primary_assemblyinputdir=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galore/outdir=$HOME/project/Human-16-Asthma-Trans/Mapping/Hisat2# 单个样本比对hisat2 -p 5 -x  $&#123;index&#125; \-1 $&#123;inputdir&#125;/SRR1039510_1_val_1.fq.gz \-2 $&#123;inputdir&#125;/SRR1039510_2_val_2.fq.gz \-S $&#123;outdir&#125;/SRR1039510.Hisat_aln.sam# sam转bamsamtools sort -@ 6 -o SRR1039510.Hisat_aln.sorted.bam SRR1039510.Hisat_aln.sam# 对bam建索引samtools index SRR1039510.Hisat_aln.sorted.bam SRR1039510.Hisat_aln.sorted.bam.bai</code></pre><h6 id="多样本"><a href="#多样本" class="headerlink" title="多样本"></a>多样本</h6><pre><code class="bash"># 多个样本批量进行比对，排序，建索引# Hisat.sh内容： 注意命令中的-，表示占位符，表示|管道符前面的输出。# vim Hisat.shindex=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.dna.primary_assemblyinputdir=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galore/outdir=$HOME/project/Human-16-Asthma-Trans/Mapping/Hisat2cat ../../data/cleandata/trim_galore/ID | while read iddo  hisat2 -p 5 -x $&#123;index&#125; -1 $&#123;inputdir&#125;/$&#123;id&#125;_1_val_1.fq.gz -2 $&#123;inputdir&#125;/$&#123;id&#125;_2_val_2.fq.gz 2&gt;$&#123;id&#125;.log  | samtools sort -@ 3 -o $&#123;outdir&#125;/$&#123;id&#125;.Hisat_aln.sorted.bam - &amp;&amp;  samtools index $&#123;outdir&#125;/$&#123;id&#125;.Hisat_aln.sorted.bam $&#123;outdir&#125;/$&#123;id&#125;.Hisat_aln.sorted.bam.baidone# 统计比对情况multiqc -o ./    SRR*log# 提交后台运行nohup sh Hisat.sh &gt;Hisat.log &amp;</code></pre><h5 id="4-4-比对-subjunc"><a href="#4-4-比对-subjunc" class="headerlink" title="4.4 比对:subjunc"></a>4.4 比对:subjunc</h5><h6 id="构建索引-1"><a href="#构建索引-1" class="headerlink" title="构建索引"></a>构建索引</h6><pre><code class="bash"># 进入参考基因组目录cd $HOME/database/genome/GRCh38_release104# subjunc构建索引，构建索引时间比较长，建议携程sh脚本提交后台运行subread-buildindex -o Homo_sapiens.GRCh38.dna.primary_assembly Homo_sapiens.GRCh38.dna.primary_assembly.fa</code></pre><h6 id="单样本-1"><a href="#单样本-1" class="headerlink" title="单样本"></a>单样本</h6><pre><code class="bash"># 进入文件夹cd $HOME/project/Human-16-Asthma-Trans/Mapping/Subjunc# 输入输出定义文件夹，上课使用的index为教师目录index=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.dna.primary_assemblyinputdir=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galoreoutdir=$HOME/project/Human-16-Asthma-Trans/Mapping/Subjunc # subjunc单样本比对subjunc -T 6 -i $&#123;index&#125; \        -r $&#123;inputdir&#125;/SRR1039510_1_val_1.fq.gz \        -R $&#123;inputdir&#125;/SRR1039510_2_val_2.fq.gz \        -o $&#123;outdir&#125;/SRR1039510.Subjunc.bam \        &gt;$&#123;outdir&#125;/SRR1039510.Subjunc.log# 排序以及构建bam索引 samtools sort -@ 6 -o SRR1039510.Subjunc.sorted.bam SRR1039510.Subjunc.bam# 建索引，.bai结尾的文件为索引samtools index SRR1039510.Subjunc.sorted.bam  SRR1039510.Subjunc.sorted.bam.bai</code></pre><h6 id="subjunc多样本比对"><a href="#subjunc多样本比对" class="headerlink" title="subjunc多样本比对"></a>subjunc多样本比对</h6><pre><code class="bash"># vim subjunc.shindex=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.dna.primary_assemblyinputdir=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galoreoutdir=$HOME/project/Human-16-Asthma-Trans/Mapping/Subjunccat ../../data/cleandata/trim_galore/ID | while read iddo  subjunc -T 10 -i $&#123;index&#125; -r $&#123;inputdir&#125;/$&#123;id&#125;_1_val_1.fq.gz -R $&#123;inputdir&#125;/$&#123;id&#125;_2_val_2.fq.gz -o $&#123;outdir&#125;/$&#123;id&#125;.Subjunc.bam 1&gt;$&#123;outdir&#125;/$&#123;id&#125;.Subjunc.log 2&gt;&amp;1 &amp;&amp; samtools sort -@ 6 -o $&#123;outdir&#125;/$&#123;id&#125;.Subjunc.sorted.bam  $&#123;outdir&#125;/$&#123;id&#125;.Subjunc.bam &amp;&amp; samtools index $&#123;outdir&#125;/$&#123;id&#125;.Subjunc.sorted.bam $&#123;outdir&#125;/$&#123;id&#125;.Subjunc.sorted.bam.baidone# 运行nohup sh subjunc.sh &gt;subjunc.log &amp;</code></pre><h4 id="5-sam-x2F-bam应用"><a href="#5-sam-x2F-bam应用" class="headerlink" title="5.sam&#x2F;bam应用"></a>5.sam&#x2F;bam应用</h4><h5 id="5-1-统计比对结果"><a href="#5-1-统计比对结果" class="headerlink" title="5.1 统计比对结果"></a>5.1 统计比对结果</h5><pre><code class="bash"># 单个样本samtools flagstat -@ 3 SRR1039510.Hisat_aln.sorted.bam# 多个样本，vim flagstat.shls *.sorted.bam | while read iddo  samtools flagstat -@ 10 $&#123;id&#125; &gt; $&#123;id/bam/flagstat&#125;done# 质控multiqc -o ./  *.flagstat# 运行nohup sh flagstat.sh &gt;flagstat.log &amp;</code></pre><h5 id="5-2-samtools工具使用"><a href="#5-2-samtools工具使用" class="headerlink" title="5.2 samtools工具使用"></a>5.2 samtools工具使用</h5><pre><code class="bash"># view查看bam文件samtools view SRR1039510.Hisat_aln.sorted.bamsamtools view -H SRR1039510.Hisat_aln.sorted.bamsamtools view -h SRR1039510.Hisat_aln.sorted.bam# index对bam文件建索引samtools index SRR1039510.Hisat_aln.sorted.bam SRR1039510.Hisat_aln.sorted.bam.bai# flagstat统计比对结果samtools flagstat -@ 3 SRR1039510.Hisat_aln.sorted.bam# sort排序 sam转bam并排序samtools sort -@ 3 -o SRR1039510.Hisat_aln.sorted.bam SRR1039510.Hisat_aln.sam# depth统计测序深度# 得到的结果中，一共有3列以指标分隔符分隔的数据，第一列为染色体名称，第二列为位点，第三列为覆盖深度samtools depth SRR1039510.Hisat_aln.sorted.bam &gt;SRR1039510.Hisat_aln.sorted.bam.depth.txt# 计算某一个基因的测序深度# 找到基因的坐标zless -S Homo_sapiens.GRCh38.95.gff3.gz |awk &#39;&#123;if($3==&quot;gene&quot;)print&#125;&#39; |grep &#39;ID=gene:ENSG00000186092&#39; |awk &#39;&#123;print $1&quot;\t&quot;$4&quot;\t&quot;$5&#125;&#39; &gt;ENSG00000186092.bedsamtools depth  -b  ENSG00000186092.bed SRR1039510.Hisat_aln.sorted.bam &gt;ENSG00000186092.bed.depth# 如何找到多比对的reads，flag值的理解# (0x100) 代表着多比对情况，所以直接用samtools view -f 0x100可以提取 multiple比对的 情况</code></pre><h4 id="6-表达定量"><a href="#6-表达定量" class="headerlink" title="6.表达定量"></a>6.表达定量</h4><h5 id="6-1-featureCounts"><a href="#6-1-featureCounts" class="headerlink" title="6.1 featureCounts"></a>6.1 featureCounts</h5><p>使用featureCounts对bam文件进行定量。</p><pre><code class="bash">cd $HOME/project/Human-16-Asthma-Trans/Expression/featureCounts## 定义输入输出文件夹gtf=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.95.gtf.gzinputdir=$HOME/project/Human-16-Asthma-Trans/Mapping/Hisat2/# featureCounts对bam文件进行计数featureCounts -T 6 -p -t exon -g gene_id -a $gtf -o all.id.txt $inputdir/*.sorted.bam# 对定量结果质控multiqc all.id.txt.summary# 得到表达矩阵cat all.id.txt | cut -f1,7- &gt; counts.txt# 处理表头，/teach/t_rna/要换成自己的路径less -S all.id.txt |grep -v &#39;#&#39; |cut -f 1,7- |sed &#39;s#/teach/t_rna/project/Human-16-Asthma-Trans/Mapping/Hisat2//##g&#39; |sed &#39;s#.Hisat_aln.sorted.bam##g&#39; &gt;raw_counts.txt# 列对齐显示head raw_counts.txt  |column -t</code></pre><h5 id="6-2-salmon定量"><a href="#6-2-salmon定量" class="headerlink" title="6.2 salmon定量"></a>6.2 salmon定量</h5><h6 id="构建索引-2"><a href="#构建索引-2" class="headerlink" title="构建索引"></a>构建索引</h6><pre><code class="bash">cd $HOME/database/genome/GRCh38_release104# 构建salmon索引salmon index -t Homo_sapiens.GRCh38.cdna.all.fa.gz -i Homo_sapiens.GRCh38.cdna.all.salmon</code></pre><h6 id="单个样本"><a href="#单个样本" class="headerlink" title="单个样本"></a>单个样本</h6><pre><code class="bash">cd $HOME/project/Human-16-Asthma-Trans/Expression/Salmon# 定义文件夹index=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.cdna.all.salmon/input=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galoreoutdir=$HOME/project/Human-16-Asthma-Trans/Expression/Salmon# 单样本测试：\后面不能有空格，否则会报错salmon quant -i $index -l A -p 5 \             -1 $input/SRR1039510_1_val_1.fq.gz \             -2 $input/SRR1039510_2_val_2.fq.gz \             -o $outdir/SRR1039510.quant</code></pre><h6 id="多个样本"><a href="#多个样本" class="headerlink" title="多个样本"></a>多个样本</h6><pre><code class="bash"># 编写脚本，使用salmon批量对目录下所有fastq文件进行定量# vim salmon.shindex=/home/t_rna/database/genome/GRCh38_release95/Homo_sapiens.GRCh38.cdna.all.salmon/input=$HOME/project/Human-16-Asthma-Trans/data/cleandata/trim_galoreoutdir=$HOME/project/Human-16-Asthma-Trans/Expression/Salmoncat ../../data/cleandata/trim_galore/ID |while read id do  salmon quant -i $&#123;index&#125; -l A -1 $&#123;input&#125;/$&#123;id&#125;_1_val_1.fq.gz -2 $&#123;input&#125;/$&#123;id&#125;_2_val_2.fq.gz -p 5 -o $&#123;outdir&#125;/$&#123;id&#125;.quantdone# 后台运行脚本nohup bash salmon.sh 1&gt;salmon.log 2&gt;&amp;1 &amp;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/05/09/article-title/"/>
      <url>/2023/05/09/article-title/</url>
      
        <content type="html"><![CDATA[<h1 id="希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！"><a href="#希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！" class="headerlink" title="希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！"></a>希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！</h1><p><strong>我应该坚持学习的有：R Python Shell编程 NGS组学知识 RNA-seq为主 扩展到单细胞测序</strong></p><h3 id="关于生物学背景"><a href="#关于生物学背景" class="headerlink" title="关于生物学背景"></a>关于生物学背景</h3><p>作为计算机背景学生转过来，应当知道如何补充生物学背景，这里推荐慕课(<a href="https://www.icourse163.org/)%E7%9A%84%E4%B8%A4%E4%B8%AA%E8%AF%BE%E7%A8%8B">https://www.icourse163.org/)的两个课程</a></p><ul><li><p>复旦大学的基因组学：<a href="https://www.icourse163.org/course/FUDAN-1002839009#/info">https://www.icourse163.org/course/FUDAN-1002839009#/info</a></p></li><li><p>四川大学的细胞生物学：<a href="https://www.icourse163.org/course/SCU-46011">https://www.icourse163.org/course/SCU-46011</a></p></li><li><p>其它课程请自行搜索，按需学习，争取掌握生信技能树的生信基础100讲：<a href="https://mp.weixin.qq.com/s/Gr_0H4-GaTYkgUkbNHcMcg">https://mp.weixin.qq.com/s/Gr_0H4-GaTYkgUkbNHcMcg</a></p></li></ul><p>生信工程师的日常工作负责<strong>跑流程</strong>：从项目管理员获知要分析的样本数据，按固定操作投递分析任务。如若流程出了问题，第一时间求助公司流程研发人员。跑流程的生信工程师常面临着这样的职业发展问题：<strong>工作可替代性高</strong>，比较容易遇到职业的天花板。</p><p>生信工程师可以朝两个方向<strong>转型</strong>：一类是<strong>流程研发人员</strong>，对技术要求的能力高；另一类是<strong>分析结果的解读人员</strong>，对业务经验的要求高。</p><p><strong>01</strong> 知其然，知其所以然</p><p>想成为大牛，首先应该掌握你每天用的分析流程。在跑流程的过程中多问问自己：分析的是什么样的数据，跑的流程的步骤是怎样的？调用了哪些软件？</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1682242587438-aed49912-44d9-4b05-b50d-081133b649de.png" alt="img"></p><p><strong>02</strong> 善于总结问题</p><p>生信工程师应该善于总结日常工作中遇到的问题，让问题更多的在平时暴露。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1682242612200-87c59202-e6f3-45a6-a00e-11b3421bbf7c.png" alt="img"></p><p><strong>03</strong> 有效沟通，持续学习</p><p>生信工程师除了应该关注硬实力，平时还应该关注自身软实力的提升。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34819848/1682242634385-1943bafe-b1fd-4374-be6c-345eac38d482.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 希望自己在生物信息领域走的更远，有新的收获 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/05/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/05/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！"><a href="#希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！" class="headerlink" title="希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！"></a>希望自己要清楚的知道，学什么，为什么而学，我认为，应当面向就业学习生物信息学！</h1><p><strong>我应该坚持学习的有：R Python Shell编程 NGS组学知识 RNA-seq为主 扩展到单细胞测序</strong></p><h3 id="关于生物学背景"><a href="#关于生物学背景" class="headerlink" title="关于生物学背景"></a>关于生物学背景</h3><p>作为计算机背景学生转过来，应当知道如何补充生物学背景，这里推荐慕课(<a href="https://www.icourse163.org/)%E7%9A%84%E4%B8%A4%E4%B8%AA%E8%AF%BE%E7%A8%8B">https://www.icourse163.org/)的两个课程</a></p><ul><li><p>复旦大学的基因组学：<a href="https://www.icourse163.org/course/FUDAN-1002839009#/info">https://www.icourse163.org/course/FUDAN-1002839009#/info</a></p></li><li><p>四川大学的细胞生物学：<a href="https://www.icourse163.org/course/SCU-46011">https://www.icourse163.org/course/SCU-46011</a></p></li><li><p>其它课程请自行搜索，按需学习，争取掌握生信技能树的生信基础100讲：<a href="https://mp.weixin.qq.com/s/Gr_0H4-GaTYkgUkbNHcMcg">https://mp.weixin.qq.com/s/Gr_0H4-GaTYkgUkbNHcMcg</a></p></li></ul><p>生信工程师的日常工作负责<strong>跑流程</strong>：从项目管理员获知要分析的样本数据，按固定操作投递分析任务。如若流程出了问题，第一时间求助公司流程研发人员。跑流程的生信工程师常面临着这样的职业发展问题：<strong>工作可替代性高</strong>，比较容易遇到职业的天花板。</p><p>生信工程师可以朝两个方向<strong>转型</strong>：一类是<strong>流程研发人员</strong>，对技术要求的能力高；另一类是<strong>分析结果的解读人员</strong>，对业务经验的要求高。</p><p><strong>01</strong> 知其然，知其所以然</p><p>想成为大牛，首先应该掌握你每天用的分析流程。在跑流程的过程中多问问自己：分析的是什么样的数据，跑的流程的步骤是怎样的？调用了哪些软件？</p><p><strong>02</strong> 善于总结问题</p><p>生信工程师应该善于总结日常工作中遇到的问题，让问题更多的在平时暴露。</p><p><strong>03</strong> 有效沟通，持续学习</p><p>生信工程师除了应该关注硬实力，平时还应该关注自身软实力的提升。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 希望自己在生物信息领域走的更远，有新的收获 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/09/hello-world/"/>
      <url>/2023/05/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
